k <- 3
clear
rm
x <- "dataset"
typeof(x)
attributes(x)
y <- 1:10
y
typeof(y)
length(y)
bash
pwd
list1 <- list(names = vector("Anne", "John", "Katie", "Sam", "Rowan"), nums = matrix(1:4, nrow = 2, ncol = 2))
namevector <-
list1 <- list(names = c("Anne", "John", "Katie", "Sam", "Rowan"), nums = matrix(1:4, nrow = 2, ncol = 2))
list1
#Access 4th and 5th name in the list stored in vector
list1$names[4:5]
#Access the first row and second column of the matrix
list1$nums[1,2]
getwd
getwd
setwd
getwd
?getwd
?setwd
getwd()
setwd(C:/Users/Laura/Documents)
setwd(dir)
setwd("C:/Users/Laura/Documents")
#Load wages.csv as a dataframe
read.csv(./Biocomputing/R_programming/"wages.csv")
#Load wages.csv as a dataframe
read.csv(C:/Users/Laura/Documents/Biocomputing/R_programming/"wages.csv")
#Load wages.csv as a dataframe
read.csv("C:/Users/Laura/Documents/Biocomputing/R_programming/wages.csv")
#Load wages.csv as a dataframe
wages <- read.csv("C:/Users/Laura/Documents/Biocomputing/R_programming/wages.csv")
#Access 15th row in the wages.csv
wages[15,]
#Find minimum wage in the entire dataframe
min(wages[,4])
min(wages$wage)
#Look in the wages dataframe and get the row that is equal to max
wages[wages$wage==max(wages$wage),]
#Look in the wages dataframe and get the row that is equal to max
#This is a logical argument, telling the program to give us the row that matches
## the highest wage, and then give us the 1st and 3rd columns
wages[wages$wage==max(wages$wage),c(1,3)]
# Make a vector called 'letters'
letters=c('A','B','C','D')
# What does 1:length(letters) correspond to?
for(i in 1:length(letters)){
print(letters[i])
}
#create a four character element called 'output'
output = character(length = length(letters))
for(i in 1:length(letters)){
#for the ith element of output
#store ith element in letters along with an 'x' (Ax, Bx, etc.)
output[i] = paste(letters[i], "x", sep="")
}
output
#Create beginning vector
nums = c(3,10,4,12,55)
#Create empty loop for the cumulative sums
sumnums <- numeric(length = length(nums))
for (i in 1:length(nums)){
sumnums[i] <- nums[i]+nums[1-i]
}
sumnums
sumnums[1] <- nums[1]
for (i in 2:length(nums)){
sumnums[i] <- nums[i]+nums[1-i]
}
sumnums
#Create empty loop for the cumulative sums
sumnums <- numeric(length = length(nums))
for (i in 1:length(nums)){
sumnums[i] <- nums[i]
sumnums[i] <- sumnums[i]+nums[i-1]
}
sumnums
for (i in 1:length(nums)){
sumnums[i] <- sum(nums[1:i])
}
sumnums
### 1 - Create a graph that shows how the points between two teams changes throughout a game
# Step 1: Read in the "UWvsMSU_1-22-13.txt" as a data frame
setwd("~/Biocomputing/R_programming/Biocomputing2020_Exercise08/")
# Need to read as delim since it is tab delimited
gameScores <- read.delim("UWvMSU_1-22-13.txt", header = TRUE)
# Step 2: Break the table apart into two data frames that contain when each team
#scored and the new score for the team
# This pulls out the times that each time scored and how many points each basket was
UWScore <- gameScores[gameScores$team == "UW", ]
MSUScore <- gameScores[gameScores$team == "MSU", ]
# This creates a new column in the team data frames to be used for finding the
#running score for each team
UWVec <- numeric(length = nrow(UWScore))
UWScore$OverallScore <- UWVec
MSUVec <- numeric(length = nrow(MSUScore))
MSUScore$OverallScore <- MSUVec
# Step 3: Fill in the running score
# This goes through and sums up the running score for each time the teams score
for (i in 1:nrow(UWScore)){
UWScore$OverallScore[i] = sum(UWScore$score[1:i])
}
for (i in 1:nrow(MSUScore)){
MSUScore$OverallScore[i] = sum(MSUScore$score[1:i])
}
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWScore$time, UWScore$OverallScore, type = '1')
# Step 4: Make the vectors that will be used for the plotting
UWtimes <- c(UWScore$time)
UWoverall <- c(UWScore$OverallScore)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, type = '1')
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, type = 1)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall)
?plot
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, l)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, type = 'l')
View(UWScore)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, type = 'l')
# Step 4: Make the vectors that will be used for the plotting
UWtimes <- c(0, UWScore$time)
UWoverall <- c(0, UWScore$OverallScore)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(UWtimes, UWoverall, type = 'l')
MSUtimes <- c(0, MSUScore$time)
MSUoverall <- c(0, MSUScore$OverallScore)
# This next step plots the MSU score on the same graph as UW using points and lines
#functions in R
points(MSUtimes, MSUoverall)
lines(MSUtimes, MSUoverall)
lines(MSUtimes, MSUoverall, col = "blue")
# This next step plots the MSU score on the same graph as UW using points and lines
#functions in R
lines(MSUtimes, MSUoverall, col = "red")
# This next step plots the MSU score on the same graph as UW using points and lines
#functions in R
lines(MSUtimes, MSUoverall, col = "green")
# Step 4: Make the vectors that will be used for the plotting
timepoints <- c(0, UWScore$time)
pointchange <- c(0, UWScore$OverallScore)
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(timepoints, pointchange, type = 'l')
# This next step plots the MSU score on the same graph as UW using the lines
#function in R
# The col input tells R what color to make the line
lines(MSUtimes, MSUoverall, col = "green")
# Step 4: Plot these two lines using subsections time and OverallScore for x and y
#respectively
plot(timepoints, pointchange, type = 'l', col = "dark red")
# This next step plots the MSU score on the same graph as UW using the lines
#function in R
# The col input tells R what color to make the line
lines(MSUtimes, MSUoverall, col = "green")
